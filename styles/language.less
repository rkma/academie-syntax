// LANGUAGE ----------------------------------------------

.comment {
  color: @comment;
  font-style: italic;

  &.documentation { color: @documentation; }
}

.keyword {
  &.control { color: @keyword;
    &.language { color: @language; }
  }
  &.operator { color: @operator; }
  &.other {
    &.special-method { color: @special-method; }
    &.unit { color: @html-unit; }
  }
}

.constant {
  &.variable { color: @constant; }
  &.numeric { color: @number; }
  &.character.escape { color: @char-esc; }
  &.language { color: @language; }
  &.other {
    &.symbol { color: @symbol; }
    &.placeholder { color: @interpol; }
  }
}

.entity {
  &.name {
    &.function { color: @function-def; }
    &.class { color: @class-def; }
    &.module { color: @class-def; }
    &.tag { color: @html-name-tag; }
  }
  &.other {
    &.inherited-class { color: @class-call; }
    &.attribute-name { color: @html-attribute-name; }
  }
}

.support {
  &.class { color: @class-call; }
  &.function { color: @function-call; }
  &.property-name { color: @html-property-name; }
  &.property-value { color: @html-property-value; }
}

.variable {
  &.block { color: @variable; }
  &.language { color: @language; }
  &.parameter { color: @variable; }
  &.readwrite { color: @readwrite }
}

.string { color: @string;
  &.regexp { color: @regexp; }
}

.punctuation {
  &.definition {
    &.parameters { color: @function-def; }
    &.tag { color: @html-separator; }
  }
  &.section {
    &.embedded, .empty { color: @interpol; }
    &.array, &.scope { color: @separator; }
    &.function { color: @function-call; }
  }
  &.separator {
    &.namespace, &.variable, &.object { color: @separator; }
    &.method { color: @function-call; }
    &.key-value { color: @operator; }
  }
}

.embedded { color: @syntax-text-color; }

.underline { text-decoration: underline; }

.storage {
  &.type { color: @storage;
    &.function { color: @function-def; }
    &.class { color: @keyword; }
  }
}

.meta {
  &.tag {
    .string { color: @html-property-value; }
  }
}

.invalid {
  &.deprecated {
    color: darken(@syntax-color-modified, 50%) !important;
    background-color: @syntax-color-modified !important;
  }
  &.illegal {
    color: @bright-white !important;
    background-color: @syntax-color-removed !important;
  }
}

// SPECIFIC --------------------------------------------

.markup {
  &.heading {
    background-color: @md-heading;
    color: @bright-black;
    font-weight: bold;

    &.marker, &.space {
      background-color: @syntax-background-color;
      color: @md-heading;
    }
  }
  &.bold {
    color: @md-bold;
    font-weight: bold;
  }
  &.italic {
    color: @md-italic;
    font-style: italic;
  }
  &.link { color: @md-link-url; }
  &.raw { color: @string; }
}

// GitHub Flavored Markdown
.source.gfm {
  .link {
    .entity { color: @md-link-name; }
    .punctuation { color: @syntax-text-color; }
  }
  .variable { color: @md-variable; }
  .quote { color: @string; }
  .username { color: @md-link-name; text-decoration: underline; }
  .issue.number { color: @md-issue; text-decoration: underline; }
}

.source.elixir {
  .variable.other {
    &.constant { color: @class-call; }
    &.anonymous { color: @function-def; }
  }
}

.source.js {
  .variable.object { color: @variable; }
  .meta{
    &.function-call {
      .entity.name.function { color: @function-call; }
    }
    &.method-call > .entity.name.function { color: @function-call; }
    &.parameters {
      .support.class { color: @variable; }
    }
  }
}

.source.c {
  .punctuation.definition.parameters { color: @syntax-text-color; }
}
